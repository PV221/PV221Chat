@model List<PV221Chat.DTO.ChatDTO>
@{
    var chatIds = Model.Select(chat => chat.ChatId).ToList();
    var chatIdsJson = Json.Serialize(chatIds);
}

<div class="chat-list">
    <h3>Chat List</h3>

    @if (Model != null && Model.Count > 0)
    {
        <div class="grid-container" id="grid-container">
            @foreach (var chat in Model)
            {
                <div class="chat-item" id="chat-@chat.ChatId" data-chat-name="@chat.ChatName">
                    <form asp-controller="Chat" asp-action="Index" method="post">
                        <input type="hidden" name="chatId" value="@chat.ChatId" />
                        <button type="submit" class="chat-link">
                            <strong>@chat.ChatName</strong>
                            @if (chat.HasUnreadMessages)
                            {
                                <span class="unread-icon">
                                    🔔 @chat.TextUnreadMessages
                                </span>
                            }
                        </button>
                    </form>
                </div>
            }
        </div>
    }
    else
    {
        <p>No chats to display.</p>
    }
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
<script type="text/javascript">
    const chatIds = @chatIdsJson;
    const chatIdViewBag = @ViewBag.ChatId;

    const connectionChatListHub = new signalR.HubConnectionBuilder()
        .withUrl(`/chatListHub?chatIds=${chatIds.join(',')}`)
        .build();

    connectionChatListHub.on("ReceiveNotification", function (chatId, message) {

        if(chatIdViewBag != chatId){
            var chatItem = document.getElementById("#chat-" + chatId);

            if(chatItem) {
                var unreadIcon = chatItem.querySelector(".unread-icon");


                if (unreadIcon) {
                    unreadIcon.innerHTML = "🔔 " + message;
                } else {
                    var newUnreadIcon = document.createElement("span");
                    newUnreadIcon.className = "unread-icon";
                    newUnreadIcon.innerHTML = "🔔 " + message;
                    chatItem.querySelector("a").appendChild(newUnreadIcon);
                }

                const gridContainer = document.getElementById("#grid-container");
                gridContainer.insertBefore(chatItem, gridContainer.firstChild);

            }
        }
    });

    connectionChatListHub.start().then(function () {
        console.log("SignalR connected");
    }).catch(function (err) {
        return console.error(err.toString());
    });

</script>

<style>
    .chat-list {
        margin: 20px 0;
    }

    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .chat-item {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
    }

    .chat-item:hover {
        transform: scale(1.05);
    }

    .chat-item a {
        text-decoration: none;
        color: #000;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .unread-icon {
        color: red;
        font-size: 0.9em;
    }
</style>
